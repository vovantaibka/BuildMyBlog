#!/usr/bin/env swordfish

require:(JSEval "require")
path   :(require "path")
D      :(.path "sep")

nodejs: (JSCallObject [$PATH_SWORDFISH "nodejs"] "join" D)
(load (+ nodejs D "package.sw"))
prime:(JSCallObject [$PATH_SWORDFISH "prime"] "join" D)
((. use "PushINC") prime true)
((. use "PushINC") "." (GetScriptURI))

(use "app.info"
"io.print"
"cgi.request.body"
"cgi.request"
"protocol.uri"
"io.print.error"
(lambda (AppInfo
Out
RequestBody
CGIRequest
URI
Error
)

	JSON:(JSEval "JSON")
	Buffer:(JSEval "Buffer")
	bodyBuffer:((. RequestBody "Get"))
	toURL:((. bodyBuffer "toString") "UTF-8")
	process:(JSEval "process")
	env:(. process "env")
	setTimeout:(JSEval "setTimeout")

	params:((. CGIRequest "GetParameters"))
	proUrl:(. params "proUrl")
	ldImgs:(|| (. params "ldImgs") "false")
	font:(|| (. params "ft") "serif")

	(Out "Content-type: text/plain; charset=UTF-8\n\n")
	(Error ">")
	injectedScriptURL:(+
		"http://127.0.0.1"
		//(. env "SERVER_NAME")
		":"
		(. env "SERVER_PORT")
		(. env "SCRIPT_NAME")
		)
	uriObj:((. URI "Translate") injectedScriptURL "/")
	(. uriObj (. URI "Name") "dom2obj")
	(. uriObj (. URI "Extend") "js")

	injectedScriptURL=((. URI "Build") uriObj "/" true)

	spawn:(. (require "child_process") "spawn")
	platform:((. (require "os") "platform") )

	phantomjspath:(cond {(== "win32" platform)
			"phantomjs-win32.exe"
		}{(== "darwin" platform)
			"./phantomjs-darwin"
		}{default
			"./phantomjs-linux"
		});
		

	program:(spawn phantomjspath ["--load-images=false" "html2dom.js" toURL injectedScriptURL proUrl ldImgs font])

	((. (. program "stdout") "pipe") (. process "stdout"))
	((. (. program "stderr") "pipe") (. process "stderr"))
	((. program "on") "exit" (JSCallback (lambda ()
		(Error "<\n")
		((. process "exit") 0 )
		)))
	
	isDataReceived:false

	((. (. program "stdout") "on") "data" (JSCallback (lambda (chunk)
		isDataReceived:true
		)))

	(setTimeout (JSCallback (lambda ()
		(if isDataReceived
			()
			((. program "kill"))
			)
		))
		20000)
))
