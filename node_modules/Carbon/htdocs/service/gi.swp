#!/usr/bin/env swordfish

require:(JSEval "require")
path   :(require "path")
D      :(.path "sep")

nodejs: (JSCallObject [$PATH_SWORDFISH "nodejs"] "join" D)
(load (+ nodejs D "package.sw"))
prime:(JSCallObject [$PATH_SWORDFISH "prime"] "join" D)
((. use "PushINC") prime true)
((. use "PushINC") "." (GetScriptURI))


(use "app.info"
"io.print"
"cgi.request"
"protocol.uri"
"io.print.error"
"util.base64.ext01"
"protocol.http.uri"
"protocol.uri"
(lambda (AppInfo
Out
CGIRequest
URI
Error
EB64
HTTPURI
URI
)

	process:(JSEval "process")
	env:(. process "env")
	toSrc:((. EB64 "Decode") (. ((. CGIRequest "GetParameters")) "u"))
	headers:((. CGIRequest "GetHeaders") true)
	uriObj:((. HTTPURI "Translate") toSrc)
	scheme:(. uriObj "scheme")
	http:(? (== scheme "https") (require "https") (require "http"))
	options:{}
	(. options "hostname" (. uriObj "domain"))
	(cond {port:(. uriObj "port")
		(. options "port" port)
		})
	(. options "method" method:(. env "REQUEST_METHOD"))

	(. options "path" ((. URI "BuildI") uriObj))
	(delete headers "Referer")
	(delete headers "Connection")
	(. headers "Host" (. uriObj "uriHost"))
	(. options "headers" headers)
	req:((. http "request") options (JSCallback (lambda (res)
		(Out (+ "Status:" stCode: (. res "statusCode") " \r\n"))
		(for (. res "headers") (lambda (key value)
			(Out (+ key ": " value "\r\n"))
			))
		(Out "\r\n")
		((. res "on") "data" (JSCallback (lambda (chunk)
			(Out chunk)
			)))
		((. res "on") "end" (JSCallback (lambda ()
			((. process "exit") 0)
			)))
		)))
	((. req "on") "error" (JSCallback (lambda (e)
		(Out (+ "Status: 500 \r\n\r\n" (. e "message")))
		((. process "exit") 0)
		)))
	(if (| (== "POST" method) (== "PUT" method))
		((.req "write") ((. RequestBody "Get")))
		)
	((. req "end"))
))
