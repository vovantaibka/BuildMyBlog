#!/usr/bin/env swordfish

require:(JSEval "require")
path   :(require "path")
D      :(.path "sep")

nodejs: (JSCallObject [$PATH_SWORDFISH "nodejs"] "join" D)
(load (+ nodejs D "package.sw"))
prime:(JSCallObject [$PATH_SWORDFISH "prime"] "join" D)
((. use "PushINC") prime true)
((. use "PushINC") "." (GetScriptURI))

(use "app.info"
"io.print"
"cgi.request"
"protocol.uri"
"io.print.error"
"cgi.response.errorstatus"
"script.string"
(lambda (AppInfo
Out
CGIRequest
URI
Error
CgiErrorStatus
SString
)

	
	Buffer:(JSEval "Buffer")
	process:(JSEval "process")
	env:(. process "env")
	params:((. CGIRequest "GetParameters"))

	file:(. params "file")
	name:(. params "name")
	os:(require "os")
	fs:(require "fs")

	encodeURI:(JSEval "encodeURI")
	sendErrorStatus:(. CgiErrorStatus "Send")

	(Error "=\n")
	userAgent:((. CGIRequest "GetHeader") "User-Agent");
	isFirefox:(!(!(match userAgent `/Firefox[ \/]([\d.]+)/i)))


	local_file_name:(+ ((. os "tmpdir")) D file ".tmp")
	((. fs "open") local_file_name "r" null (JSCallback (lambda (err,fp)
		(if (!fp)
			(return (sendErrorStatus Out 403))
			)
		file_handle:fp
		((. fs "fstat") file_handle (JSCallback (lambda (err stats)

			(if ((. stats "isFile"))
				(do
					response_file_size=(. stats "size")
					(Out "Content-type: application/octet-stream\r\n")
					(Out (+ "Content-Length: " response_file_size "\r\n"))
					(Out "Content-Disposition: attachment;filename=\"")
					(? isFirefox (Out name) (Out (encodeURI name)))
					(Out "\"\r\n\r\n")
					fileReader:((. fs "createReadStream") null {
						"fd":fp
						})
					((. fileReader "pipe") (. process "stdout"))
					)
				(do
					((. fs "close") fp)
					(return (sendErrorStatus Out 403))
					)
				)
			)))
		)))
))
